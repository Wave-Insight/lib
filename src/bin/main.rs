#![deny(
    // The following are allowed by default lints according to
    // https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html
    anonymous_parameters,
    bare_trait_objects,
    box_pointers,
    // elided_lifetimes_in_paths, // allow anonymous lifetime
    missing_copy_implementations, // Copy may cause unnecessary memory copy
    missing_debug_implementations,
    missing_docs, // TODO: add documents
    single_use_lifetimes, // TODO: fix lifetime names only used once
    trivial_casts, // TODO: remove trivial casts in code
    trivial_numeric_casts,
    // unreachable_pub, allow clippy::redundant_pub_crate lint instead
    unsafe_code,
    unstable_features,
    unused_extern_crates,
    unused_import_braces,
    unused_qualifications,
    unused_results, // TODO: fix unused results
    variant_size_differences,

    warnings, // treat all wanings as errors

    clippy::all,
    clippy::restriction,
    clippy::pedantic,
    clippy::nursery,
    // clippy::cargo
)]
#![allow(
    // Some explicitly allowed Clippy lints, must have clear reason to allow
    clippy::blanket_clippy_restriction_lints, // allow clippy::restriction
    clippy::implicit_return, // actually omitting the return keyword is idiomatic Rust code
    clippy::module_name_repetitions, // repeation of module name in a struct name is not big deal
    clippy::multiple_crate_versions, // multi-version dependency crates is not able to fix
    clippy::panic, // allow debug_assert, panic in production code
    // clippy::panic_in_result_fn,
    clippy::missing_errors_doc, // TODO: add error docs
    clippy::exhaustive_structs,
    clippy::exhaustive_enums,
    clippy::missing_panics_doc, // TODO: add panic docs
    clippy::panic_in_result_fn,
)]
// #![deny(missing_docs)]

//! Hello world example for Rust.
use wave_insight_lib::structure::Structure;
fn main(){
    let mut constructor = Structure::new_constructor();
    constructor.set_filename("input.vcd");
    constructor.set_version("Generated by VerilatedVcd");
    constructor.set_date("Mon Mar  7 16:03:36 2022");
    constructor.set_timescale("1ps");
    // find new submodule: TOP
    constructor.new_module("TOP");
    // find new wire: clk
    {
        let wire_id   = "'";
        let wire_name = "clk";
        let wire_size = 1;
        let wire_refs = [0,0];
        constructor.new_wire(wire_id,wire_name,wire_size,wire_refs);
    }
    // find new wire: io_state
    {
        let wire_id   = "&";
        let wire_name = "io_state"; 
        let wire_size = 8;
        let wire_refs = [7,0];
        constructor.new_wire(wire_id,wire_name,wire_size,wire_refs);
    }
    // find new wire: reset
    {
        let wire_id   = "(";
        let wire_name = "reset"; 
        let wire_size = 1;
        let wire_refs = [0,0];
        constructor.new_wire(wire_id,wire_name,wire_size,wire_refs);
    }
    // find new submodule: MyTopLevel
    constructor.new_module("MyTopLevel");
    // find new wire: clk
    {
        let wire_id   = "'";
        let wire_name = "clk"; 
        let wire_size = 1;
        let wire_refs = [0,0];
        constructor.new_wire(wire_id,wire_name,wire_size,wire_refs);
    }
    // find new wire: counter
    {
        let wire_id   = ")";
        let wire_name = "counter"; 
        let wire_size = 8;
        let wire_refs = [7,0];
        constructor.new_wire(wire_id,wire_name,wire_size,wire_refs);
    }
    // find End_Module
    constructor.end_module();
    // find new submodule: MyTest
    constructor.new_module("MyTest");
    // find new wire: clk
    {
        let wire_id   = "'";
        let wire_name = "clk"; 
        let wire_size = 1;
        let wire_refs = [0,0];
        constructor.new_wire(wire_id,wire_name,wire_size,wire_refs);
    }
    // find End_Module
    constructor.end_module();
    // find End_Module
    constructor.end_module();

    let s = constructor.structure;
    // println!();
    // println!("{:?}",s);
    // println!();
    let bincode = s.to_bincode();
    // println!("{:?}",bincode);
    // println!();
    let s_from_bincode = Structure::from_bincode(&bincode);
    // println!("{:?}",s_from_bincode);
    // println!();
    assert_eq!(s,s_from_bincode);
}
