mod wire {
    #[test]
    fn json() {
        use super::super::Wire;
        let w = Wire::new(1, "test", 2, [0,0], vec![1, 2, 3]);
        println!("{:?}", w);
        let json = w.to_json();
        println!("{}", json);
        let w_j = Wire::from_json(&json);
        println!("{:?}", w_j);
        assert_eq!(w, w_j);
    }
    #[test]
    fn bincode() {
        use super::super::Wire;
        let w = Wire::new(1, "test", 2, [0,0], vec![1, 2, 3]);
        println!("{:?}", w);
        let bincode = w.to_bincode();
        println!("{:?}", bincode);
        let w_bincode = Wire::from_bincode(&bincode);
        println!("{:?}", w_bincode);
        assert_eq!(w, w_bincode);
    }
}

mod module {

    #[test]
    fn json() {
        use super::super::Module;
        let m = Module::new(1, "test", vec![1, 2], vec![], vec![1, 2, 3]);
        println!("{:?}", m);
        let json = m.to_json();
        println!("{}", json);
        let m_j = Module::from_json(&json);
        println!("{:?}", m_j);
        assert_eq!(m, m_j);
    }

    #[test]
    fn bincode() {
        use super::super::Module;
        let m = Module::new(1, "test", vec![1, 2], vec![], vec![1, 2, 3]);
        println!("{:?}", m);
        let bincode = m.to_bincode();
        println!("{:?}", bincode);
        let m_bincode = Module::from_bincode(&bincode);
        println!("{:?}", m_bincode);
        assert_eq!(m, m_bincode);
    }
}

mod structure {
    use super::super::Structure;
    #[allow(dead_code)]
    fn from_constructor() -> Structure<'static, 'static, 'static> {
        let mut constructor = Structure::new_constructor();
        constructor.filename = "input.vcd";
        constructor.version = "Generated by VerilatedVcd";
        constructor.date = "Mon Mar  7 16:03:36 2022";
        constructor.timescale = "1ps";
        // find new submodule: TOP
        constructor.new_module("TOP");
        // find new wire: clk
        let wire_id = "'";
        let wire_name = "clk";
        let wire_size = 1;
        let wire_refs = [0,0];
        constructor.new_wire(wire_id, wire_name, wire_size, wire_refs);
        // find new wire: io_state
        let wire_id = "&";
        let wire_name = "io_state";
        let wire_size = 8;
        let wire_refs = [7,0];
        constructor.new_wire(wire_id, wire_name, wire_size, wire_refs);
        // find new wire: reset
        let wire_id = "(";
        let wire_name = "reset";
        let wire_size = 1;
        let wire_refs = [0,0];
        constructor.new_wire(wire_id, wire_name, wire_size, wire_refs);
        // find new submodule: MyTopLevel
        constructor.new_module("MyTopLevel");
        // find new wire: clk
        let wire_id = "'";
        let wire_name = "clk";
        let wire_size = 1;
        let wire_refs = [0,0];
        constructor.new_wire(wire_id, wire_name, wire_size, wire_refs);
        // find new wire: counter
        let wire_id = ")";
        let wire_name = "counter";
        let wire_size = 8;
        let wire_refs = [7,0];
        constructor.new_wire(wire_id, wire_name, wire_size, wire_refs);
        // find End_Module
        constructor.end_module();
        // find new submodule: MyTest
        constructor.new_module("MyTest");
        // find new wire: clk
        let wire_id = "'";
        let wire_name = "clk";
        let wire_size = 1;
        let wire_refs = [0,0];
        constructor.new_wire(wire_id, wire_name, wire_size, wire_refs);
        // find End_Module
        constructor.end_module();
        // find End_Module
        constructor.end_module();

        Structure::from_constructor(constructor)
    }

    #[test]
    fn constructor() {
        let structure = from_constructor();
        println!("{:?}", structure);
    }

    #[test]
    fn json() {
        let structure = from_constructor();
        println!("{:?}", structure);
        let json = structure.to_json();
        println!("{:?}", json);
        let s_from_json = Structure::from_json(&json);
        println!("{:?}", s_from_json);
        assert_eq!(structure, s_from_json)
    }

    #[test]
    fn bincode() {
        let structure = from_constructor();
        println!("{:?}", structure);
        let bincode = structure.to_bincode();
        println!("{:?}", bincode);
        let s_from_bincode = Structure::from_bincode(&bincode);
        println!("{:?}", s_from_bincode);
        assert_eq!(structure, s_from_bincode)
    }
}
